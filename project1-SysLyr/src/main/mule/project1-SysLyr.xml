<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="ef27f176-a5f8-48f1-ae96-5525abba05e1" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<file:config name="File_Config" doc:name="File Config" doc:id="4f852bc0-1640-48ff-b98d-dcf68b5f6b7a" >
	</file:config>
	<db:config name="Database_Config" doc:name="Database Config" doc:id="75afb52d-dea1-4ab2-b481-145c2276f01b" >
		<db:my-sql-connection host="localhost" port="3306" user="root" password="123456" database="details" />
	</db:config>
	<flow name="personalDetails" doc:id="3cc64d06-4563-4edb-904d-bc00644eeef9" >
		<http:listener doc:name="Listener" doc:id="2a824af7-6b76-4d5f-838b-51da125932de" config-ref="HTTP_Listener_config" path="/example"/>
		<file:read doc:name="personalDetails" doc:id="7eef8fb5-e024-4eec-93ef-a58eb8789672" path="D:\example\personalDetails.csv" config-ref="File_Config"/>
		<ee:transform doc:name="csv-json" doc:id="f538413e-4b77-48e3-aad6-63bbd76d58ad" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<batch:job jobName="exampleBatch_Job" doc:id="85f82a3e-725b-42c8-b15f-1d6af68782f5" >
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="3fb24fda-d8f0-4d34-85ab-20990cf2ad6b" acceptExpression="#[(sizeOf(payload.PHONE)==10)]">
					<db:insert doc:name="Insert" doc:id="0760ac00-c584-4f65-8c30-7e6bffb67722" config-ref="Database_Config">
				<db:sql><![CDATA[insert into  details.personaldetails values(:firstname,:middleName,:Lastname,:address1,:address2,:phone);]]></db:sql>
				<db:input-parameters><![CDATA[#[{
	firstname: payload.FIRSTNAME,
	middleName: payload.MIDDLENAME,
	Lastname: payload.LASTNAME,
	address1: payload.ADDRESS1,
	address2: payload.ADDRESS2,
	phone: payload.PHONE
}]]]></db:input-parameters>
			</db:insert>
				</batch:step>
			</batch:process-records>
		</batch:job>
	</flow>
	<flow name="DepartmentDetails" doc:id="09caf18d-9e60-4f7e-945d-3f320d9e3bab" >
		<http:listener doc:name="Listener" doc:id="b9fa82c6-5c26-46ef-9fdf-c24acd77ec38" config-ref="HTTP_Listener_config" path="/example1" />
		<file:read doc:name="DepartmentDetails" doc:id="d7a7dc2c-c4f3-4fba-ad4a-355c52b9c1a3" config-ref="File_Config" path="D:\example\DepartmentDetails.csv" />
		<ee:transform doc:name="csv-json" doc:id="d5ac6d68-2731-43ed-b8f9-3373b5dde911" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<batch:job jobName="exampleBatch_Job1" doc:id="698d6d2a-8454-4ee5-8d94-bc66764de9fa" >
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="7ae975de-c38b-4a9a-8081-c66b72951435" acceptExpression='#[payload.DEPTID contains "DEPTID"]'>
					<db:insert doc:name="Copy_of_Insert" doc:id="af30da98-db32-4c42-94a8-08e6cc35a9dc" config-ref="Database_Config" >
						<db:sql ><![CDATA[insert into  details.departmentdetails values(:deptid,:designation,:dateOfJoining,:salary,:previousemployer);]]></db:sql>
						<db:input-parameters ><![CDATA[#[{
	deptid: payload.DEPTID,
	designation: payload.DESIGNATION,
	dateOfJoining: payload.DATEOFJOINING,
	salary: payload.SALARY,
	previousemployer: payload.PREVIOUSEMPLOYER

}]]]></db:input-parameters>
					</db:insert>
				</batch:step>
			</batch:process-records>
		</batch:job>
	</flow>
	<flow name="exampleFlow" doc:id="af86788e-e75c-4378-abda-526583883596" >
		<set-variable value='#[output application/json&#10;---&#10;&#10;	{&#10;	("UserID1" : attributes.queryParams.UserID1) if (attributes.queryParams.UserID1 != null),&#10;	("UserID2" : attributes.queryParams.UserID2) if (attributes.queryParams.UserID2 != null),&#10;	("UserID3" : attributes.queryParams.UserID3) if (attributes.queryParams.UserID3 != null)&#10;}]' doc:name="Set Variable" doc:id="3e5a6027-a225-4e30-a65b-4d7c9755a964" variableName="userID"/>
		<db:select doc:name="Select" doc:id="305eab48-ab6b-42c8-8673-6fbb4457bb06" config-ref="Database_Config">
					<db:sql><![CDATA[select * from detailss where USERID in (:USERID1 , :USERID2,:USERID3);]]></db:sql>
					<db:input-parameters><![CDATA[#[output application/json
---

	{
	"USERID1" : attributes.queryParams.UserID1,
	"USERID2" : attributes.queryParams.UserID2,
	"USERID3" : attributes.queryParams.UserID3
}]]]></db:input-parameters>
				</db:select>
		<ee:transform doc:name="Transform Message" doc:id="166ffb33-7666-453f-9a5d-9e7709afeac9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<validation:is-not-empty-collection doc:name="Is not empty collection" doc:id="c58b9c3f-8210-48dc-8ca0-d44e6cb9d04c">
			<error-mapping targetType="INVALID:NOUSERID" />
		</validation:is-not-empty-collection>
		<ee:transform doc:name="Transform Message" doc:id="01c7a084-f568-47ec-b061-db9741525f4f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map {
    query: "select USERID," ++ $.COLUMNAMES ++ " from " ++ $.TABLENAME ++ " where USERID = '" ++ $.USERID ++ "'"
    
} 
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<parallel-foreach doc:name="Parallel For Each" doc:id="de3434e4-7f3f-4afe-8f72-2ab32e284d58">
					<db:select doc:name="Select" doc:id="e8f68ade-4937-4371-999c-98b686b4bccc" config-ref="Database_Config">
				<db:sql><![CDATA[#[payload.query]]]></db:sql>
			</db:select>
		</parallel-foreach>
		<ee:transform doc:name="Transform Message" doc:id="d5d84347-43b3-4205-8ad3-8e3963e1af23">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload.payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="7ce01cd1-71c5-422d-a774-4cdc7350f5f3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
(((((payload) reduce ($$++$) ) ) groupBy $.USERID)

mapObject (value, key, index) -> {
    (key): (value) reduce($++$$)
})orderBy $.DEPTID groupBy $.DEPTID 
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="6937656d-30b5-46d3-8892-610f85371dc1" type="DB:CONNECTIVITY">
				<ee:transform doc:name="Transform Message" doc:id="66a09709-505b-49a3-bf0f-0fc784325ea2" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{

   "error": "DATABASE ERROR",

   "message": error.description,

   "detail": "check the database connections"

} ]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="0184c00c-d04f-409e-ac0b-7e42acf245cc" type="INVALID:NOUSERID">
				<ee:transform doc:name="Transform Message" doc:id="fd1cb6ae-76b7-489a-b830-cac7ab9e208a" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var msg =["No records available for  this UserID Hence cannot proceed with the execution"]
---
	   {
	   	error: "Invalid USERID",
	   	message:  msg+ vars.UserID,
	   	details: "please enter the valid UserID"
	   }]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
</mule>
